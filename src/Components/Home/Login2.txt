Subject: Request for Emergency Leave Due to health issue 


I hope this email finds you well. I am writing to inform you about a sudden and serious health issue that I am currently facing. Unfortunately, I have been diagnosed with a severe stomach disease, and my medical condition has worsened over the past few days.

 However, my health has deteriorated to the point where I am unable to perform my duties effectively. My doctors have strongly advised that I take immediate medical leave to undergo treatment and recover.

Attached to this email, you will find a copy of my medical report, which provides details of my diagnosis and the recommended treatment plan. I assure you that I did not take this decision lightly, and I am committed to minimizing any disruption to the project during my absence. I am willing to provide any assistance necessary to ensure a smooth transition of my responsibilities to a colleague or team member. Additionally, I will keep you updated on my progress and expected duration of the medical leave.

I kindly request your understanding and support during this challenging time. If you require any further information or have specific instructions regarding the project while I am on leave, please do not hesitate to reach out to me via email or phone.

I apologize for any inconvenience my absence may cause and will make every effort to return to work as soon as I am medically fit to do so.

Thank you for your understanding and consideration.

Sincerely,

Sumit Kumar
925937

Attachment: Medical Report [Attach the medical report to the email]











import React, { useEffect, useState } from 'react';

function YourComponent() {
  const [userRole, setUserRole] = useState('');
  const [showNavbar, setShowNavbar] = useState(false); // Initially hide the navbar

  useEffect(() => {
    // Simulate fetching user role data from an API
    fetchUserRoleFromAPI()
      .then((role) => {
        setUserRole(role);

        // Check if the userRole meets the condition to show the navbar
        if (role === 'Admin') {
          setShowNavbar(true); // Show the navbar for Admin users
        }
      })
      .catch((error) => {
        console.error('Error fetching user role:', error);
        // Handle the error appropriately
      });
  }, []);

  const fetchUserRoleFromAPI = async () => {
    // Simulate fetching user role data from an API
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve('Admin'); // Replace with the actual user role obtained from the API
      }, 1000); // Simulated delay
    });
  };

  return (
    <div>
      {showNavbar ? (
        <nav>
          {/* Render your navigation menu here */}
          <ul>
            <li>Home</li>
            <li>About</li>
            <li>Contact</li>
          </ul>
        </nav>
      ) : (
        <div>
          {/* Render an alternative message or content when the navbar is disabled */}
          <p>Navbar is disabled for your role.</p>
        </div>
      )}
    </div>
  );
}

export default YourComponent;



const allAuthoCodes = roles.reduce((accumulator, currentRole) => {
  const authoCodesForRole = currentRole.authAcces.map((authAccess) => authAccess.authoocode);
  return accumulator.concat(authoCodesForRole);
}, []);

console.log(allAuthoCodes);






import React, { useState } from 'react';

function YourComponent() {
  // Create state variables to store the form values
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  });

  // Event handler to update the state when any input changes
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // Event handler to retrieve the form values on button click
  const handleSubmit = () => {
    // You can access the form values from the formData object
    console.log('Name:', formData.name);
    console.log('Email:', formData.email);
    console.log('Message:', formData.message);

    // You can perform further actions with the values, such as sending them to an API
  };

  return (
    <div>
      <h2>Contact Form</h2>
      <form>
        <div>
          <label>Name:</label>
          <input type="text" name="name" value={formData.name} onChange={handleInputChange} />
        </div>
        <div>
          <label>Email:</label>
          <input type="email" name="email" value={formData.email} onChange={handleInputChange} />
        </div>
        <div>
          <label>Message:</label>
          <textarea name="message" value={formData.message} onChange={handleInputChange} />
        </div>
        <button type="button" onClick={handleSubmit}>
          Submit
        </button>
      </form>
    </div>
  );
}

export default YourComponent;






import React from 'react';

function ObjectMappingComponent({ data }) {
  return (
    <div>
      <h2>Object Data</h2>
      <ul>
        {Object.keys(data).map(key => (
          <li key={key}>
            {key}: {typeof data[key] === 'object'
              ? JSON.stringify(data[key])
              : data[key]}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ObjectMappingComponent;


const data = {
  key1: 'value1',
  key2: {
    nestedKey: 'value2'
  },
  key3: 'value3'
};




const data = {
  key1: 'value1',
  key2: {
    nestedKey: 'value2',
    nestedKey1: 'value3'
  },
  key3: 'value4'
};

// Map through key2 and retrieve values
const nestedValues = Object.keys(data.key2).map(key => data.key2[key]);

console.log(nestedValues); // This will print ['value2', 'value3'] to the console



/* Dark background */
body {
  background-color: #333; /* Adjust the color to your preference */
  color: white; /* Text color */
  font-family: 'YourCustomFont', sans-serif; /* Replace 'YourCustomFont' with your custom font */
}

/* Spinner styles */
.spinner-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.spinner {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-top: 4px solid #007bff; /* You can change the color */
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}




import React from 'react';
import './Spinner.css';

function Spinner() {
  return (
    <div className="spinner-container">
      <div className="spinner"></div>
    </div>
  );
}

export default Spinner;
